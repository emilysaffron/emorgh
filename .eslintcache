[{"/Users/saffre01/emorgh/src/Data.js":"1","/Users/saffre01/emorgh/src/App.js":"2","/Users/saffre01/emorgh/src/Rate.js":"3","/Users/saffre01/emorgh/src/NavBar.js":"4","/Users/saffre01/emorgh/src/FetchArticles.js":"5","/Users/saffre01/emorgh/src/Submitted.js":"6"},{"size":4043,"mtime":1607096959561,"results":"7","hashOfConfig":"8"},{"size":169,"mtime":1607084388961,"results":"9","hashOfConfig":"8"},{"size":3006,"mtime":1607084431489,"results":"10","hashOfConfig":"8"},{"size":1652,"mtime":1606912098245,"results":"11","hashOfConfig":"8"},{"size":713,"mtime":1606835732049,"results":"12","hashOfConfig":"8"},{"size":617,"mtime":1606913081869,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"1dij7l",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/saffre01/emorgh/src/Data.js",["27"],"import React, { useState, useEffect } from \"react\";\nimport { Headline } from \"@bbc/psammead-headings\";\nimport Paragraph from \"@bbc/psammead-paragraph\";\nimport Image from \"@bbc/psammead-image\";\nimport BulletedList, { BulletedListItem } from \"@bbc/psammead-bulleted-list\";\nimport Grid from \"@bbc/psammead-grid\";\nimport styled from \"@emotion/styled\";\nimport getData from \"./FetchArticles\";\n\nconst StyledImage = styled(Image)`\n  object-fit: cover;\n  width: 62.5%;\n  max-height: 62.5%;\n  padding-bottom: 1rem;\n`;\nfunction Data({ num }) {\n  const [article, setArticle] = useState(\"\");\n\n  useEffect(() => {\n    setArticle(getData(num));\n  }, [num]);\n\n  return article ? (\n    <Grid\n      enableGelGutters\n      columns={{\n        group0: 8,\n        group1: 8,\n        group2: 8,\n        group3: 8,\n        group4: 8,\n        group5: 8,\n      }}\n      margins={{\n        group0: true,\n        group1: true,\n        group2: true,\n        group3: true,\n        group4: true,\n        group5: true,\n      }}\n    >\n      {article.map((item) => {\n        switch (item.type) {\n          case \"heading\":\n            return (\n              <Grid\n                item\n                startOffset={{\n                  group0: 2,\n                  group1: 2,\n                  group2: 2,\n                  group3: 2,\n                  group4: 2,\n                  group5: 2,\n                }}\n                columns={{\n                  group0: 8,\n                  group1: 8,\n                  group2: 8,\n                  group3: 8,\n                  group4: 8,\n                  group5: 8,\n                }}\n              >\n                <Headline>{item.model.text}</Headline>\n              </Grid>\n            );\n\n          case \"paragraph\":\n            return (\n              <Grid\n                item\n                startOffset={{\n                  group0: 2,\n                  group1: 2,\n                  group2: 2,\n                  group3: 2,\n                  group4: 2,\n                  group5: 2,\n                }}\n                columns={{\n                  group0: 5,\n                  group1: 5,\n                  group2: 5,\n                  group3: 5,\n                  group4: 5,\n                  group5: 5,\n                }}\n              >\n                <Paragraph>{item.model.text}</Paragraph>\n              </Grid>\n            );\n          case \"image\":\n            return (\n              <Grid\n                item\n                startOffset={{\n                  group0: 2,\n                  group1: 2,\n                  group2: 2,\n                  group3: 2,\n                  group4: 2,\n                  group5: 2,\n                }}\n                columns={{\n                  group0: 8,\n                  group1: 8,\n                  group2: 8,\n                  group3: 8,\n                  group4: 8,\n                  group5: 8,\n                }}\n              >\n                <StyledImage src={item.model.url} alt={item.model.altText} />\n              </Grid>\n            );\n\n          case \"list\":\n            let listLength = item.model.items.length;\n            let list = [];\n            for (let i = 0; i < listLength; i++) {\n              list[i] = (\n                <BulletedListItem>{item.model.items[i]}</BulletedListItem>\n              );\n            }\n\n            return (\n              <Grid\n                item\n                startOffset={{\n                  group0: 2,\n                  group1: 2,\n                  group2: 2,\n                  group3: 2,\n                  group4: 2,\n                  group5: 2,\n                }}\n                columns={{\n                  group0: 8,\n                  group1: 8,\n                  group2: 8,\n                  group3: 8,\n                  group4: 8,\n                  group5: 8,\n                }}\n              >\n                <BulletedList>{list}</BulletedList>\n              </Grid>\n            );\n\n          default:\n            break;\n        }\n      })}\n    </Grid>\n  ) : (\n    <div>loading ...</div>\n  );\n}\n\nexport default Data;\n","/Users/saffre01/emorgh/src/App.js",[],"/Users/saffre01/emorgh/src/Rate.js",[],"/Users/saffre01/emorgh/src/NavBar.js",[],"/Users/saffre01/emorgh/src/FetchArticles.js",[],"/Users/saffre01/emorgh/src/Submitted.js",[],{"ruleId":"28","severity":1,"message":"29","line":43,"column":27,"nodeType":"30","messageId":"31","endLine":43,"endColumn":29},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd"]